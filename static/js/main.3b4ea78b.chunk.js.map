{"version":3,"sources":["components/Card.js","components/Cardlist.js","components/Searchbox.js","components/Scroll.js","containers/arra.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","id","email","address","username","className","src","alt","Cardlist","arra","map","user","i","key","Searchbox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","filteredArray","this","filter","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3b4ea78b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.css';\r\n\r\nconst Card = ({name,id,email,address,username}) => {\r\n\r\n    return(\r\n        \r\n <div id='container'  className='tc dib br3 ma3 pa1 grow shadow-5'>\r\n     \r\n      <img id='image'   src={`https://robohash.org/${id}`} alt=\"robo\"/>\r\n      <div>\r\n     <h2>{name}</h2>\r\n    <p>{email}</p>\r\n </div>\r\n<div id='overlay'>\r\n     <div id='heading'>\r\n     <h2>{name}</h2>\r\n    <p>{email}</p>\r\n </div>\r\n </div>\r\n </div>\r\n    );\r\n   \r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst Cardlist= ({arra}) => {\r\n \r\n\r\n    return(\r\n        <div>\r\n            { \r\n arra.map((user,i) =>{\r\n     return <Card \r\n             key={i} \r\n             id={arra[i].id}\r\n             name={arra[i].name}\r\n             email={arra[i].email}\r\n             \r\n\r\n             />\r\n    })\r\n    }\r\n\r\n        </div>\r\n    );\r\n}\r\nexport default Cardlist;","import React from 'react';\r\n\r\nconst Searchbox = ({ searchChange}) => {\r\n\r\n    return(\r\n        <div className='pa2'>\r\n            <input className='bg-lightest-blue br2 bw1 pa3 b--blue' \r\n            type=\"search\" \r\n            placeholder='Find Robo Friend'\r\n            onChange={(searchChange)}\r\n           \r\n            />\r\n        </div>\r\n    );\r\n}\r\nexport default Searchbox;\r\n","import React from 'react'\r\n\r\nimport './Scroll.css';\r\nconst Scroll = (props) => {\r\n    return (\r\n<div  style={{ overflow: 'scroll',border: '3px solid black',  height: '80vh'}}>\r\n     {props.children}\r\n </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","export const arra = [\r\n    {\r\n        id: 0,\r\n        name: 'Hongas',\r\n        email: 'honghas@tuta.io'\r\n    },\r\n    {\r\n        id:1 ,\r\n        name: 'Jan doe',\r\n        email: 'jandoe@tuta.io'\r\n    },\r\n    {\r\n        id: 2,\r\n        name: 'Lasran',\r\n        email: 'lasrai@tuta.io'\r\n    },\r\n    {\r\n        id: 3,\r\n        name: 'Andei',\r\n        email: 'andet@tuta.io'\r\n    },\r\n    {\r\n        id: 4,\r\n        name: 'Rusail',\r\n        email: 'rusaile@tuta.io'\r\n    },\r\n    {\r\n        id: 5,\r\n        name: 'Emmy Haster',\r\n        email: 'itsemmyhast@tuta.io'\r\n    },\r\n    {\r\n        id: 6,\r\n        name: 'Anderson',\r\n        email: 'andersa@gmai.com'\r\n    },\r\n    {\r\n        id: 7,\r\n        name: 'Leanne Graham',\r\n        username: 'Bret',\r\n        email: 'Sincere@april.biz'\r\n    },\r\n    {\r\n        id: 8,\r\n        name: 'Ervin Howell',\r\n        username: 'Antonette',\r\n        email: 'Shanna@melissa.tv'\r\n    },\r\n    {\r\n        id: 9,\r\n        name: 'Clementine Bauch',\r\n        username: 'Samantha',\r\n        email: 'Nathan@yesenia.net'\r\n    },\r\n    {\r\n        id: 10,\r\n        name: 'Patricia Lebsack',\r\n        username: 'Karianne',\r\n        email: 'Julianne.OConner@kory.org'\r\n    },\r\n    {\r\n        id: 11,\r\n        name: 'Chelsey Dietrich',\r\n        username: 'Kamren',\r\n        email: 'Lucio_Hettinger@annie.ca'\r\n    },\r\n    {\r\n        id: 12,\r\n        name: 'Mrs. Dennis Schulist',\r\n        username: 'Leopoldo_Corkery',\r\n        email: 'Karley_Dach@jasper.info'\r\n    },\r\n    {\r\n        id: 13,\r\n        name: 'Kurtis Weissnat',\r\n        username: 'Elwyn.Skiles',\r\n        email: 'Telly.Hoeger@billy.biz'\r\n    },\r\n    {\r\n        id: 14,\r\n        name: 'Nicholas Runolfsdottir V',\r\n        username: 'Maxime_Nienow',\r\n        email: 'Sherwood@rosamond.me'\r\n    },\r\n    {\r\n        id: 15,\r\n        name: 'Glenna Reichert',\r\n        username: 'Delphine',\r\n        email: 'Chaim_McDermott@dana.io'\r\n    },\r\n    {\r\n        id: 16,\r\n        name: 'Clementina DuBuque',\r\n        username: 'Moriah.Stanton',\r\n        email: 'Rey.Padberg@karina.biz'\r\n    }\r\n]","import React, { Component } from 'react'\r\nimport Cardlist from '../components/Cardlist';\r\nimport Searchbox from '../components/Searchbox';\r\nimport Scroll from '../components/Scroll';\r\n\r\nimport { arra } from './arra'\r\nclass  App extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            arra: arra,\r\n            searchfield: ''\r\n        }\r\n    }\r\n  \r\n    onSearchChange = (event) => {\r\n        this.setState({searchfield: event.target.value})\r\n    }\r\n    render() {\r\n\r\n        const filteredArray = this.state.arra.filter(arra => {    \r\n        return arra.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\r\n        })\r\n        if(this.state.arra.length === 0){\r\n            return <div className='tc'> <h1>Loading</h1></div> \r\n        }  else  {\r\n            return (\r\n                <div className='tc'>\r\n                    <h1>RoboFriends</h1>\r\n                 \r\n                    <Searchbox searchChange={this.onSearchChange}/>\r\n                    <Scroll>\r\n                    <Cardlist arra={filteredArray}/>\r\n                  </Scroll>\r\n               </div>\r\n\r\n            );\r\n        }\r\n\r\n \r\n}\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport 'tachyons';\r\nimport * as serviceWorker from './serviceWorker';\r\nReactDOM.render(\r\n    <App/>\r\n    ,document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}